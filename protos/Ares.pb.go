// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Ares.proto

/*
Package ares is a generated protocol buffer package.

It is generated from these files:
	Ares.proto

It has these top-level messages:
	Node
	Empty
	App
	Apps
	AppStatus
	AppsStatus
*/
package ares

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppStatusMode int32

const (
	AppStatusMode_ON     AppStatusMode = 0
	AppStatusMode_FAILED AppStatusMode = 1
	AppStatusMode_OFF    AppStatusMode = 2
)

var AppStatusMode_name = map[int32]string{
	0: "ON",
	1: "FAILED",
	2: "OFF",
}
var AppStatusMode_value = map[string]int32{
	"ON":     0,
	"FAILED": 1,
	"OFF":    2,
}

func (x AppStatusMode) String() string {
	return proto.EnumName(AppStatusMode_name, int32(x))
}
func (AppStatusMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Database
type Node struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type App struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Apps struct {
	Apps []*App `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (m *Apps) Reset()                    { *m = Apps{} }
func (m *Apps) String() string            { return proto.CompactTextString(m) }
func (*Apps) ProtoMessage()               {}
func (*Apps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Apps) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type AppStatus struct {
	Mode AppStatusMode `protobuf:"varint,1,opt,name=mode,enum=ares.AppStatusMode" json:"mode,omitempty"`
}

func (m *AppStatus) Reset()                    { *m = AppStatus{} }
func (m *AppStatus) String() string            { return proto.CompactTextString(m) }
func (*AppStatus) ProtoMessage()               {}
func (*AppStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppStatus) GetMode() AppStatusMode {
	if m != nil {
		return m.Mode
	}
	return AppStatusMode_ON
}

type AppsStatus struct {
	Status map[string]*AppStatus `protobuf:"bytes,1,rep,name=status" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppsStatus) Reset()                    { *m = AppsStatus{} }
func (m *AppsStatus) String() string            { return proto.CompactTextString(m) }
func (*AppsStatus) ProtoMessage()               {}
func (*AppsStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppsStatus) GetStatus() map[string]*AppStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "ares.Node")
	proto.RegisterType((*Empty)(nil), "ares.Empty")
	proto.RegisterType((*App)(nil), "ares.App")
	proto.RegisterType((*Apps)(nil), "ares.Apps")
	proto.RegisterType((*AppStatus)(nil), "ares.AppStatus")
	proto.RegisterType((*AppsStatus)(nil), "ares.AppsStatus")
	proto.RegisterEnum("ares.AppStatusMode", AppStatusMode_name, AppStatusMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AresService service

type AresServiceClient interface {
	// Login
	Login(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	RegisterApps(ctx context.Context, in *Apps, opts ...grpc.CallOption) (*Empty, error)
	NotifyAppsStatus(ctx context.Context, in *AppsStatus, opts ...grpc.CallOption) (*Empty, error)
	HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SubscribeCommands(ctx context.Context, in *Node, opts ...grpc.CallOption) (AresService_SubscribeCommandsClient, error)
}

type aresServiceClient struct {
	cc *grpc.ClientConn
}

func NewAresServiceClient(cc *grpc.ClientConn) AresServiceClient {
	return &aresServiceClient{cc}
}

func (c *aresServiceClient) Login(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ares.AresService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aresServiceClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ares.AresService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aresServiceClient) RegisterApps(ctx context.Context, in *Apps, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ares.AresService/RegisterApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aresServiceClient) NotifyAppsStatus(ctx context.Context, in *AppsStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ares.AresService/NotifyAppsStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aresServiceClient) HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/ares.AresService/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aresServiceClient) SubscribeCommands(ctx context.Context, in *Node, opts ...grpc.CallOption) (AresService_SubscribeCommandsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AresService_serviceDesc.Streams[0], c.cc, "/ares.AresService/SubscribeCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &aresServiceSubscribeCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AresService_SubscribeCommandsClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type aresServiceSubscribeCommandsClient struct {
	grpc.ClientStream
}

func (x *aresServiceSubscribeCommandsClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AresService service

type AresServiceServer interface {
	// Login
	Login(context.Context, *Node) (*Empty, error)
	Logout(context.Context, *Empty) (*Empty, error)
	RegisterApps(context.Context, *Apps) (*Empty, error)
	NotifyAppsStatus(context.Context, *AppsStatus) (*Empty, error)
	HeartBeat(context.Context, *Empty) (*Empty, error)
	SubscribeCommands(*Node, AresService_SubscribeCommandsServer) error
}

func RegisterAresServiceServer(s *grpc.Server, srv AresServiceServer) {
	s.RegisterService(&_AresService_serviceDesc, srv)
}

func _AresService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AresServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ares.AresService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AresServiceServer).Login(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _AresService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AresServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ares.AresService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AresServiceServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AresService_RegisterApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Apps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AresServiceServer).RegisterApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ares.AresService/RegisterApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AresServiceServer).RegisterApps(ctx, req.(*Apps))
	}
	return interceptor(ctx, in, info, handler)
}

func _AresService_NotifyAppsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AresServiceServer).NotifyAppsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ares.AresService/NotifyAppsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AresServiceServer).NotifyAppsStatus(ctx, req.(*AppsStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _AresService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AresServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ares.AresService/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AresServiceServer).HeartBeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AresService_SubscribeCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AresServiceServer).SubscribeCommands(m, &aresServiceSubscribeCommandsServer{stream})
}

type AresService_SubscribeCommandsServer interface {
	Send(*App) error
	grpc.ServerStream
}

type aresServiceSubscribeCommandsServer struct {
	grpc.ServerStream
}

func (x *aresServiceSubscribeCommandsServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

var _AresService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ares.AresService",
	HandlerType: (*AresServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AresService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AresService_Logout_Handler,
		},
		{
			MethodName: "RegisterApps",
			Handler:    _AresService_RegisterApps_Handler,
		},
		{
			MethodName: "NotifyAppsStatus",
			Handler:    _AresService_NotifyAppsStatus_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _AresService_HeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCommands",
			Handler:       _AresService_SubscribeCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Ares.proto",
}

func init() { proto.RegisterFile("Ares.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x5b, 0x6b, 0xe2, 0x40,
	0x14, 0xc7, 0x9d, 0x24, 0x46, 0x72, 0xb2, 0x97, 0xec, 0xec, 0x8b, 0x2b, 0xbb, 0x20, 0x61, 0x45,
	0x5b, 0x4a, 0x28, 0xd1, 0x87, 0xd2, 0xb7, 0xb4, 0x55, 0xda, 0x62, 0x15, 0xe2, 0x27, 0x18, 0xcd,
	0x54, 0x42, 0x9b, 0xcc, 0x30, 0x33, 0x11, 0xf2, 0x25, 0x4a, 0x3f, 0x72, 0xc9, 0x05, 0x2f, 0xa1,
	0xf4, 0x69, 0xfe, 0xcc, 0xf9, 0x9f, 0xdb, 0x8f, 0x03, 0x10, 0x08, 0x2a, 0x3d, 0x2e, 0x98, 0x62,
	0xd8, 0x20, 0x82, 0x4a, 0xb7, 0x07, 0xc6, 0x82, 0x45, 0x14, 0x63, 0x30, 0x52, 0x92, 0xd0, 0x2e,
	0xea, 0xa3, 0x91, 0x15, 0x96, 0xda, 0xed, 0x40, 0x7b, 0x9a, 0x70, 0x95, 0xbb, 0x7f, 0x40, 0x0f,
	0x38, 0xff, 0xd4, 0x33, 0x00, 0x23, 0xe0, 0x5c, 0xe2, 0x7f, 0x60, 0x10, 0xce, 0x65, 0x17, 0xf5,
	0xf5, 0x91, 0xed, 0x5b, 0x5e, 0x51, 0xdc, 0x0b, 0x38, 0x0f, 0xcb, 0x6f, 0x77, 0x02, 0x56, 0xc0,
	0xf9, 0x4a, 0x11, 0x95, 0x49, 0x3c, 0x04, 0x23, 0x61, 0x51, 0x55, 0xe7, 0x87, 0xff, 0x7b, 0xef,
	0xad, 0xc2, 0x4f, 0x2c, 0xa2, 0x61, 0x69, 0x70, 0xdf, 0x10, 0x40, 0x51, 0xbd, 0xce, 0x9b, 0x80,
	0x29, 0x4b, 0x55, 0x77, 0xf9, 0xbb, 0xcf, 0xac, 0x1d, 0x5e, 0xf5, 0x4c, 0x53, 0x25, 0xf2, 0xb0,
	0xf6, 0xf6, 0x1e, 0xc1, 0x3e, 0xfa, 0xc6, 0x0e, 0xe8, 0x2f, 0x34, 0xaf, 0x77, 0x28, 0x24, 0x1e,
	0x40, 0x7b, 0x47, 0x5e, 0x33, 0xda, 0xd5, 0xfa, 0x68, 0x64, 0xfb, 0x3f, 0x1b, 0xf3, 0x84, 0x55,
	0xf4, 0x5a, 0xbb, 0x42, 0xe7, 0x17, 0xf0, 0xfd, 0x64, 0x4e, 0x6c, 0x82, 0xb6, 0x5c, 0x38, 0x2d,
	0x0c, 0x60, 0xce, 0x82, 0x87, 0xf9, 0xf4, 0xce, 0x41, 0xb8, 0x03, 0xfa, 0x72, 0x36, 0x73, 0x34,
	0xff, 0x5d, 0x03, 0xbb, 0x00, 0xbe, 0xa2, 0x62, 0x17, 0x6f, 0x28, 0x76, 0xa1, 0x3d, 0x67, 0xdb,
	0x38, 0xc5, 0x50, 0xb5, 0x28, 0xc0, 0xf7, 0xec, 0x4a, 0x57, 0xa0, 0x5b, 0xf8, 0x3f, 0x98, 0x73,
	0xb6, 0x65, 0x99, 0xc2, 0xc7, 0x81, 0xa6, 0xeb, 0x0c, 0xbe, 0x85, 0x74, 0x1b, 0x4b, 0x45, 0x45,
	0x49, 0x1f, 0x0e, 0x24, 0x9a, 0xd6, 0x31, 0x38, 0x0b, 0xa6, 0xe2, 0xe7, 0xfc, 0x08, 0xa4, 0xd3,
	0x04, 0xd7, 0x4c, 0x1a, 0x82, 0x75, 0x4f, 0x89, 0x50, 0x37, 0x94, 0x7c, 0x3d, 0x88, 0x07, 0xbf,
	0x56, 0xd9, 0x5a, 0x6e, 0x44, 0xbc, 0xa6, 0xb7, 0x2c, 0x49, 0x48, 0x1a, 0xc9, 0x93, 0xf5, 0x0e,
	0x97, 0xe0, 0xb6, 0x2e, 0xd1, 0xda, 0x2c, 0x6f, 0x6f, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0xc3,
	0x53, 0x48, 0xab, 0x89, 0x02, 0x00, 0x00,
}
